<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>markdwon在hexo中的一些错误</title>
      <link href="/2023/06/05/markdown/"/>
      <url>/2023/06/05/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="vue的差值语法"><a href="#vue的差值语法" class="headerlink" title="vue的差值语法"></a>vue的差值语法</h1><p>在markdown文本当中 不能写双花括号 ,不然运行hexo 会报错</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3第二天</title>
      <link href="/2023/06/05/Vue3_day2/"/>
      <url>/2023/06/05/Vue3_day2/</url>
      
        <content type="html"><![CDATA[<h1 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h1><p>生命周期就是事物产生到消亡的整个过程。</p><h2 id="创建阶段create"><a href="#创建阶段create" class="headerlink" title="创建阶段create"></a>创建阶段create</h2><p>​两个钩子函数；分别是beforeCreate  和 created</p><p>beforeCreate—出生前   </p><p>注意点 ：在此时不能获取data中的数据得到的是null</p><p>created — 出生了</p><p>注意点：这里就可以获取data中的数据</p><h2 id="挂载阶段mount"><a href="#挂载阶段mount" class="headerlink" title="挂载阶段mount"></a>挂载阶段mount</h2><p>两个钩子函数；分别是beforeMount  和 mounted</p><p>beforeMount —- 挂载前</p><p>注意点：这里是获取不到dom节点的  这里还在处理虚拟dom</p><p>mounted — 挂载后</p><p>注意点：页面加载完毕的时候就是这时 可以获取dom节点，默认情况下，在组件的生命周期中只会触发一次。一般第三方组件的初始化就在这里</p><h2 id="更新阶段-updata"><a href="#更新阶段-updata" class="headerlink" title="更新阶段 updata"></a>更新阶段 updata</h2><p>两个钩子函数；分别是beforeUpdate   和 updated </p><p>beforeUpdate   —学习前</p><p>updated  —学会了</p><p>注意点：可以重复触发的</p><h2 id="销毁阶段-unMount"><a href="#销毁阶段-unMount" class="headerlink" title="销毁阶段 unMount"></a>销毁阶段 unMount</h2><p>两个钩子函数；分别是beforeunMount 和 unmounted  </p><p>beforeunMount —交代后事</p><p>unmounted  —-寿终正寝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123;info&#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">const</span>  app=  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="keyword">return</span> &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">info</span>:<span class="string">&quot;hello,world&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//第一个阶段 创建   两个钩子函数  beforeCreate   created</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123; <span class="comment">// 创建之前 数据还没有初始化  获取不到data里面的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=================beforeCreate info =&#x27;</span>, <span class="variable language_">this</span>.<span class="property">info</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">created</span>(<span class="params"></span>) &#123;  <span class="comment">// 创建完成后 数据已经初始化完毕 可以获取data的数据  这个钩子函数 用于一些网络请求 ，定时器 与data 相关的都可以</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=================created info =&#x27;</span>, <span class="variable language_">this</span>.<span class="property">info</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;  <span class="comment">//五秒之后卸载</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  app.<span class="title function_">unmount</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;,<span class="number">5000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//第二个阶段 挂载  两个钩子函数 beforeMount  mounted</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;  <span class="comment">//  挂载前  获取到dom 节点 这时候 才生成虚拟dom</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=================beforeMount dom=&#x27;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;info&#x27;</span>));                </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">mounted</span>(<span class="params"></span>) &#123;  <span class="comment">//挂载完成之后  可以获取dom  对dom进行一系列操作    一般第三方组件的初始化 在这里进行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=================mounted dom=&#x27;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;info&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">// 第三个阶段 更新 两个钩子函数 beforeUpdata   updated</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;   <span class="comment">//数据更新前  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=================beforeUpdate&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">updated</span>(<span class="params"></span>) &#123;   <span class="comment">// 更新后</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=================updated&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="comment">//第四个阶段 卸载  两个钩子函数 beforeUnmount   unmounted</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">beforeUnmount</span>(<span class="params"></span>) &#123;   <span class="comment">//卸载之前   用于清除一些定时器等等 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=================beforeUnmount dom=&#x27;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;info&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">unmounted</span>(<span class="params"></span>) &#123; <span class="comment">//卸载完成</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=================unmounted dom=&#x27;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;info&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在开发中,我们经常需要用到函数, 通过将一些需要复用的逻辑封装在函数里,多次调用这个函数来增强逻辑代码复用性，在vue中,函数被定义在methods选项里来使用,定义完后就可以在vue 表达式中调用函数。</p><h2 id="vue定义方法"><a href="#vue定义方法" class="headerlink" title="vue定义方法"></a>vue定义方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;  <span class="comment">// vue的配置项</span></span><br><span class="line">  <span class="comment">// 初始化数据</span></span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">info</span>: <span class="string">&#x27;hello world&#x27;</span>, <span class="comment">// 初始化一个info的数据</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="comment">// 下面两种格式都能实现功能</span></span><br><span class="line">      <span class="title function_">setInfo</span>(<span class="params"></span>)&#123; <span class="comment">// 推荐用缩写</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">info</span> = <span class="string">&#x27;我喜欢学习&#x27;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">setInfo</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        ...</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//setInfo: () =&gt; &#123;&#125;, // 千万不要这样用哈，这样他的this就指向了window对象了</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setInfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setInfo()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意两种调用方法的区别，什么时候用哪种根据实际情况而定<br><code>setInfo</code> 默认参数是event<br><code>setInfo()</code> 默认参数是传入的参数，如果带括号的时候需要用event，使用<code>setInfo($event)</code><br><code>如果我们的方法有参数的情况，使用setInfo()，如果不关心参数的情况使用setInfo</code></p><h2 id="有返回值的方法"><a href="#有返回值的方法" class="headerlink" title="有返回值的方法"></a>有返回值的方法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; getCount2() &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getCount2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h1><p>vue响应式也叫作数据双向绑定，大致原理阐述：<br>首先我们需要通过Object.defineProperty()方法把数据(data)设置为getter和setter的访问形式，这样我们就可以在数据被修改时在setter方法设置监视修改页面信息，也就是说每当数据被修改，就会触发对应的set方法，然后我们可以在set方法中去调用操作dom的方法。</p><h2 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h2><p>用插值语法或v-text文本类指令可以使用js表达式或者函数。<br>计算属性具有依赖性，只有当依赖的值发生改变，才会重新计算<br>同等条件下，计算属性优于 方法 以及 js表达式。</p><p>计算属性就是一个属性依赖与多个属性，多个数据变化，会引起该数据的变化就用计算属性</p><p>计算属性会有缓存，当依赖的数据不发生变化的时候，vue会取缓存，不会重新进行计算，消耗内存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">   &lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;key&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in goodslist&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               &#123;&#123;item&#125;&#125;</span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="attr">key</span>: <span class="string">&quot;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="attr">list</span>: [<span class="string">&quot;衣服&quot;</span>, <span class="string">&quot;上衣&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;长袖&quot;</span>, <span class="string">&quot;衬衣&quot;</span>, <span class="string">&quot;短袖&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="title function_">goodslist</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">includes</span>(<span class="variable language_">this</span>.<span class="property">key</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">// methods:&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">//     search()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">//         this.goodslist = this.list.filter((item)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">//            return item.includes(this.key)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">//         &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">//     &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>计算属性擅长处理的场景是：多个数据影响一个数据 —-购物车商品结算。</strong></p><h4 id="计算属性的对象配置get，set方法"><a href="#计算属性的对象配置get，set方法" class="headerlink" title="计算属性的对象配置get，set方法"></a>计算属性的对象配置get，set方法</h4><p>每一个计算属性都有一个get方法，当vue解析该属性的时候会执行get方法，通过 返回值拿到对应的计算过后的值</p><h2 id="侦听器watch"><a href="#侦听器watch" class="headerlink" title="侦听器watch"></a>侦听器watch</h2><p>使用watch来侦听data中数据的变化，watch中的属性一定是data 中已经存在的数据 或者 computed 生成的新属性。</p><p>watch可以监听路由中的数据的变化</p><h4 id="watch中数据的函数形式，接收两个参数，参数一是接收最新值，参数二是旧的值-watch（newV，oldV）"><a href="#watch中数据的函数形式，接收两个参数，参数一是接收最新值，参数二是旧的值-watch（newV，oldV）" class="headerlink" title="watch中数据的函数形式，接收两个参数，参数一是接收最新值，参数二是旧的值 watch（newV，oldV）"></a>watch中数据的函数形式，接收两个参数，参数一是接收最新值，参数二是旧的值 watch（newV，oldV）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>已经上课了&#123;&#123;classTime&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!classOver&quot;</span>&gt;</span>距离下课还有&#123;&#123;time&#125;&#125;分钟<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>下课了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="keyword">return</span> &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">time</span>:<span class="number">5</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">classOver</span>:<span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">created</span>(<span class="params"></span>)&#123; <span class="comment">//创建完成时可以拿到data里面的数据 这里就可以对数据进行操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;<span class="variable language_">this</span>.<span class="property">time</span>--;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);&#125;,<span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">classTime</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">return</span> <span class="number">5</span>-<span class="variable language_">this</span>.<span class="property">time</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//可以侦听计算属性 和 data里面的属性数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">time</span>(<span class="params">newV,oldv</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span>(newV==<span class="number">0</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">this</span>.<span class="property">classOver</span>= <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="watch中数据的对象形式配置"><a href="#watch中数据的对象形式配置" class="headerlink" title="watch中数据的对象形式配置"></a>watch中数据的对象形式配置</h4><ol><li><p>handler(newV，oldV){}   触发的回调函数  数据变法触发该回调函数，参数一改变的新值，参数二原来的旧值</p></li><li><p>immediate 配置项  期待值是布尔   如果为true 就是主动监听，页面vue挂载完毕就会调用回调函数。 false就是惰性监听，只有当触发数据改变了才会调用回调函数。 默认值就是false</p></li><li><p>deep 配置项  期待值是布尔  如果为true 就是深度监听。类似于深浅拷贝，当你数据为复杂数据类型，如果数据变化了，没有触发回调就需要添加该配置项。false就是浅度监听。默认是false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123;str&#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">str</span>:&#123;<span class="attr">a</span>:<span class="number">3</span>,<span class="attr">b</span>:<span class="number">4</span>,<span class="attr">c</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">watch</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">str</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">handler</span>(<span class="params">newv,oldv</span>)&#123; <span class="comment">//回调处理函数   </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;newv,oldv&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">immediate</span>:<span class="literal">true</span>,  <span class="comment">//默认是 惰性监听 数据改变后才监听  如果为true 就是主动 监听 当页面渲染就会监听,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">deep</span>:<span class="literal">true</span>  <span class="comment">//深度监听  默认是false   如果是深度监听 会更加深层次的监听 就可以触发回调函数 对象就监听不到了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">change</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">str</span>.<span class="property">a</span> = <span class="number">9</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3脚手架</title>
      <link href="/2023/06/05/Vue3%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>/2023/06/05/Vue3%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3脚手架"><a href="#Vue3脚手架" class="headerlink" title="Vue3脚手架"></a>Vue3脚手架</h1><h2 id="什么是脚手架工具"><a href="#什么是脚手架工具" class="headerlink" title="什么是脚手架工具"></a>什么是脚手架工具</h2><p>能够快速帮我们创建一个基于Vue框架的项目的工具。</p><h2 id="常用的Vue的脚手架工具有哪些"><a href="#常用的Vue的脚手架工具有哪些" class="headerlink" title="常用的Vue的脚手架工具有哪些"></a>常用的Vue的脚手架工具有哪些</h2><ul><li>VueCLI</li><li><ul><li><a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></li><li>Vue2 时期官方的一款脚手架工具。不再推荐。</li><li>虽然不推荐了，但是还是可以使用它来创建 Vue2、Vue3 的项目。</li><li>内部使用的构建工具是  Webpack 。</li></ul></li><li>create-vite</li><li><ul><li><a href="https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project">https://cn.vitejs.dev/guide/#scaffolding-your-first-vite-project</a></li><li>Vue3 出来之后</li><li>内部使用的构建工具是 Vite。</li><li>它不光可以用于创建 Vue 项目，还可以创建 React 等其他框架的项目。</li></ul></li><li>create-vue</li><li><ul><li><a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application</a></li><li>Vue3 出来之后，官方推荐的。</li><li>内部使用的构建工具是 Vite。</li><li>它是基于 <code>create-vite</code> ，提供给专门创建 Vue 项目的。</li></ul></li></ul><blockquote><p>我们搭建工程都会用create-vue，其他的只需要了解</p></blockquote><h2 id="Vite-是什么"><a href="#Vite-是什么" class="headerlink" title="Vite 是什么"></a>Vite 是什么</h2><p>官网链接：<a href="https://cn.vitejs.dev/">https://cn.vitejs.dev/</a></p><p>尤雨溪团队最新打造的。下一代的前端工具链（构建工具）。用于取代以往的 Webpack 。</p><h2 id="安装VueClI"><a href="#安装VueClI" class="headerlink" title="安装VueClI"></a>安装VueClI</h2><ol><li>先配置下 <code>npm</code> 的淘宝镜像。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">复制# 配置</span><br><span class="line">npm config set registry https://registry.npmmirror.com</span><br><span class="line"></span><br><span class="line"># 查看当前的配置</span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure><ol><li>全局安装脚手架工具</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制npm install -g @vue/cli</span><br></pre></td></tr></table></figure><ol><li>验证安装是否成功</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制vue --version</span><br></pre></td></tr></table></figure><p>输出 @vue&#x2F;cli 的版本。注意：不是 Vue 版本</p><ol><li>选择一个目录，运行如下命令，创建 Vue 项目</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制vue create [project-name]</span><br></pre></td></tr></table></figure><ol><li>创建成功，进入到项目目录下，运行如下命令启动项目</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制npm run serve</span><br></pre></td></tr></table></figure><ol><li>项目启动之后，会在本地运行一个服务，默认监听的是 8080 端口。如果需要关闭本地运行的话，可以在终端连按两次 ctrl + c 键。</li></ol><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>一个vue文件最基本的模板，必要要有的标签</p><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>里面有一个默认export default  里面的配置项就是vue实例的配置项</p><h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>标签里面的 scoped，表示样式只在当前vue文件中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p><h1 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h1><h2 id="什么是单文件组件"><a href="#什么是单文件组件" class="headerlink" title="什么是单文件组件"></a>什么是单文件组件</h2><p>在 Vue 项目中，后缀名为 .vue 的，就是单文件组件。简称 SFC（Single File Component）</p><h2 id="有什么好处"><a href="#有什么好处" class="headerlink" title="有什么好处"></a>有什么好处</h2><ul><li>使用熟悉的 HTML、Css、JavaScript 语法编写模块化的组件</li><li>通过给编辑器（VsCode）安装一些插件，有语法高亮、代码提示</li><li>可以实现组件的私有样式</li></ul><h2 id="3-单文件组件的组成"><a href="#3-单文件组件的组成" class="headerlink" title="3.单文件组件的组成"></a>3.单文件组件的组成</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">复制&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      info;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;info&quot;&gt;&#123;&#123; info &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.info &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><script> 组件的逻辑部分相当于原来我们学的组件的配置项</li><li><p>template 组件的模板部分，相当于原来我们学的组件的配置项的tempalte部分</p><ul><li>必须的，有且能有有一个</li></ul></li><li><p>style  组件的样式部分</p><ul><li>默认是全局样式，可以通过给 <code>style</code> 标签添加一个 <code>scoped</code> 属性，让这个样式只针对当前组件生效。</li><li>可选的，可以有多个 style 标签</li></ul></li></ul><h2 id="如何设置私有作用域样式"><a href="#如何设置私有作用域样式" class="headerlink" title="如何设置私有作用域样式"></a>如何设置私有作用域样式</h2><h6 id="方式："><a href="#方式：" class="headerlink" title="方式："></a>方式：</h6><p>可以通过给 <code>style</code> 标签添加一个 <code>scoped</code> 属性，让这个样式只针对当前组件生效。</p><h6 id="如何实现的呢："><a href="#如何实现的呢：" class="headerlink" title="如何实现的呢："></a>如何实现的呢：</h6><ol><li>会将设置了 <code>scoped</code> 属性的组件的模板的所有元素上，都添加上一个 <code>data-xxxx</code> 属性</li><li>最终生成的样式，会携带上 <code>[data-xxxx]</code> 这样的属性选择器</li></ol><h6 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h6><p>如果一个组件有自己的私有作用域样式，我使用它时要修改它的样式该如何办</p><ol><li>使用深度选择器  <code>:deep()</code> 来控制子组件内的样式 -  推荐  ::v-deep(选择器){}</li><li>再写一个不设置 <code>scoped</code> 属性的 <code>style</code> 标签</li><li>使用<code>:global(.global_class)</code>的格式</li></ol><h2 id="使用-css预处理器"><a href="#使用-css预处理器" class="headerlink" title="使用 css预处理器"></a>使用 css预处理器</h2><p>css预处理器有哪些：</p><ol><li>scss</li><li>less</li><li>windcss tailwindcss</li></ol><p>只需要给 style 标签，设置一个 lang 属性，属性值为对应的预处理器即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制&lt;style lang=<span class="string">&quot;less&quot;</span>&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3第五天</title>
      <link href="/2023/06/05/Vue3_day5/"/>
      <url>/2023/06/05/Vue3_day5/</url>
      
        <content type="html"><![CDATA[<h1 id="父子组件的生命周期"><a href="#父子组件的生命周期" class="headerlink" title="父子组件的生命周期"></a>父子组件的生命周期</h1><p>父组件和子组件的关系更像是上下级，总体和局部的关系，不应该考虑成父子关系。</p><h2 id="生命周期的顺序"><a href="#生命周期的顺序" class="headerlink" title="生命周期的顺序"></a>生命周期的顺序</h2><p>加载渲染过程：<br>1.父组件 beforeCreate<br>2.父组件 created<br>3.父组件 beforeMount<br>4.子组件 beforeCreate<br>5.子组件 created<br>6.子组件 beforeMount<br>7.子组件 mounted<br>8.父组件 mounted</p><p>更新过程：<br>父组件 beforeUpdate<br>2.子组件 beforeUpdate<br>3.子组件 updated<br>4.父组件 updated</p><p>销毁过程：<br>父组件 beforeUnmount<br>2.子组件 beforeUnmount<br>3.子组件 unmounted<br>4.父组件 unmounted</p><h1 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>在Vue中 数据变化 在created这个钩子函数后 ，但是子啊虚拟dom渲染这个期间，是会有稍微的一点延迟，这就要用到vue的内置方法</span></span><br><span class="line"><span class="language-xml">    $nextTick  相当于延迟等虚拟dom转换完成之后，数据完成改变 时 执行里面的回调函数</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span> &#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> &#123; </span><br><span class="line">              num :<span class="number">10</span></span><br><span class="line">                 &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">          <span class="title function_">add</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">num</span>++</span><br><span class="line">            <span class="comment">// 获取一下 dom 节点 然后拿到这个改变的数据</span></span><br><span class="line">            <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=============div的数据&#x27;</span>,div.<span class="property">innerHTML</span>); </span><br><span class="line">            <span class="comment">// 会发现 随便数据变了 但是会有延迟 所以需要用到$nextTick</span></span><br><span class="line">            <span class="variable language_">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">              <span class="comment">// const div = document.querySelector(&quot;#div&quot;)</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=============div的数据&#x27;</span>,div.<span class="property">innerHTML</span>); </span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">     &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="强制刷新-forceUpdate"><a href="#强制刷新-forceUpdate" class="headerlink" title="强制刷新$forceUpdate"></a>强制刷新$forceUpdate</h1><p>刷新vue实例  会引起更新得钩子函数调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;str&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;update&quot;</span>&gt;</span>我要强制刷新VUE实例<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">       <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">         <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> &#123; </span><br><span class="line">               <span class="attr">str</span>:<span class="number">123</span></span><br><span class="line">                  &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">methods</span>: &#123;</span><br><span class="line">           <span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="variable language_">this</span>.$forceUpdate()</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;==================beforeUpdate&#x27;</span>,<span class="variable language_">this</span>.<span class="property">str</span>);</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=================updated&#x27;</span>,<span class="variable language_">this</span>.<span class="property">str</span>);</span><br><span class="line">         &#125;,</span><br><span class="line">      </span><br><span class="line">      &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="局部注册自定义指令"><a href="#局部注册自定义指令" class="headerlink" title="局部注册自定义指令"></a>局部注册自定义指令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-visibility</span>=<span class="string">&quot;visible&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    我是自定义指令 v-visibility</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> &#123; </span><br><span class="line">              visible :<span class="string">&quot;hidden&quot;</span></span><br><span class="line">                 &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">directives</span>:&#123; <span class="comment">//局部自定义指令</span></span><br><span class="line">          <span class="attr">visibility</span>:&#123;</span><br><span class="line">            <span class="title function_">mounted</span>(<span class="params">el,binding</span>) &#123;</span><br><span class="line">              el.<span class="property">style</span>.<span class="property">visibility</span> = binding.<span class="property">value</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(el,binding);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="全局注册自定义指令"><a href="#全局注册自定义指令" class="headerlink" title="全局注册自定义指令"></a>全局注册自定义指令</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-visibility</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        自定义指令是否能看见</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      <span class="keyword">const</span> app =  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">          <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> &#123; </span><br><span class="line">                <span class="attr">show</span>:<span class="literal">true</span></span><br><span class="line">                   &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">show</span> = <span class="variable language_">this</span>.<span class="property">show</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">       &#125;)</span><br><span class="line">       </span><br><span class="line">       app.<span class="title function_">directive</span>(<span class="string">&quot;visibility&quot;</span>,&#123;</span><br><span class="line">        <span class="title function_">updated</span>(<span class="params">el,binding</span>) &#123;  <span class="comment">//这里需要用updated 钩子函数 因为数据修改了 要执行一遍</span></span><br><span class="line">            <span class="keyword">if</span>(binding.<span class="property">value</span>==<span class="literal">true</span>)&#123;</span><br><span class="line">              el.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&#x27;visible&#x27;</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              el.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&#x27;hidden&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">       &#125;)</span><br><span class="line"></span><br><span class="line">      app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3第四天</title>
      <link href="/2023/06/05/Vue3_day4/"/>
      <url>/2023/06/05/Vue3_day4/</url>
      
        <content type="html"><![CDATA[<h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><h2 id="把方法传给子组件"><a href="#把方法传给子组件" class="headerlink" title="把方法传给子组件"></a>把方法传给子组件</h2><p>通过自定义属性，父组件传一个函数给子组件，子组件通过props接收这个函数，然后在自己触发事件函数中，调用这个传过来的函数，这样就可以操作父亲的方法，从而修改父亲的data的一些值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 父组件给子组件定义一个自定义属性</span></span><br><span class="line">  &lt;<span class="title class_">Child</span> name=<span class="string">&#x27;张三&#x27;</span> :giveMoney=post&gt;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">  <span class="comment">// post是父组件的方法</span></span><br><span class="line">       <span class="attr">methods</span>:&#123;</span><br><span class="line">                <span class="title function_">post</span>(<span class="params">v</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">money</span> -=v</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 子组件通过props接收  并触发事件来调用它</span></span><br><span class="line"> &lt;button @click=requireMoney&gt;我向父亲要钱通过父亲传递一个函数&lt;/button&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;giveMoney&quot;</span>],</span><br><span class="line">methods：&#123;</span><br><span class="line">    <span class="title function_">requireMoney</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="title function_">giveMoney</span>(<span class="number">1500</span>)</span><br><span class="line">                   <span class="variable language_">this</span>.<span class="property">childMoney</span> +=<span class="number">1500</span></span><br><span class="line">               &#125;,</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="通过引用的方式进行传值"><a href="#通过引用的方式进行传值" class="headerlink" title="通过引用的方式进行传值"></a>通过引用的方式进行传值</h2><h3 id="获取子组件引用"><a href="#获取子组件引用" class="headerlink" title="获取子组件引用"></a>获取子组件引用</h3><p>ref用于父组件讲孩子组件注册一下，用一个唯一的值来确定子组件是哪一个</p><p>使用选项式 API，引用将被注册在组件的 <code>this.$refs</code> 对象里</p><p>放在DOM元素上，获取DOM节点，放到组件上，获取子组件的实例，可以直接使用子组件的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Parent</span> =&#123;</span><br><span class="line">          <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div&gt;</span></span><br><span class="line"><span class="string">              我是父组件 ，我有&#123;&#123;Parentmoney&#125;&#125;元  &lt;br&gt;</span></span><br><span class="line"><span class="string">              &lt;button @click=giveMoeny&gt;主动给钱通过ref,$refs&lt;/button&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;hr&gt;</span></span><br><span class="line"><span class="string">          &lt;Child :name=&quot;Childname&quot; ref=&quot;Child1&quot;&gt;&lt;/Child&gt;</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string">          `</span>,</span><br><span class="line">          <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                  <span class="title class_">Childname</span> : <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">                  <span class="title class_">Parentmoney</span>:<span class="number">100000</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          ,</span><br><span class="line">          <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$root</span>.<span class="property">test</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">components</span>:&#123;</span><br><span class="line">              <span class="title class_">Child</span></span><br><span class="line">          &#125;,</span><br><span class="line">      <span class="attr">methods</span>:&#123;</span><br><span class="line">              <span class="title function_">giveMoeny</span>(<span class="params"></span>)&#123;</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">Child1</span>.<span class="property">ChildMoney</span> +=<span class="number">1000</span></span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">Parentmoney</span>-=<span class="number">1000</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：孩子的隐私我们不能随便翻看，除非他提供给你看，更不要说你私自去修改人家的隐私</strong></p><h3 id="Vue自己带的引用-parent"><a href="#Vue自己带的引用-parent" class="headerlink" title="Vue自己带的引用$parent"></a>Vue自己带的引用$parent</h3><p>当前组件的父组件实例，如果当前组件是顶层组件，则为 null。<br>可以通过$parent访问或操作他的任何东西，但是不建议这么做，这样破坏程序的健壮性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> =&#123;</span><br><span class="line">          <span class="attr">props</span>:[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">          <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">          &lt;div style=margin-left:30px&gt;</span></span><br><span class="line"><span class="string">              我是子组件,我叫&#123;&#123;name&#125;&#125;</span></span><br><span class="line"><span class="string">              &lt;p&gt;我有&#123;&#123;ChildMoney&#125;&#125;元&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;button @click=askMoenyByref&gt;我要向父亲要钱 通过$parent 强制拿&lt;/button&gt;</span></span><br><span class="line"><span class="string">              &lt;/div&gt;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">          `</span>,</span><br><span class="line">          <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                  <span class="title class_">ChildMoney</span>:<span class="number">1000</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">methods</span>: &#123;</span><br><span class="line">              <span class="title function_">askMoenyByref</span>(<span class="params"></span>)&#123;</span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">Parentmoney</span> -=<span class="number">2000</span></span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">ChildMoney</span>+=<span class="number">2000</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h3 id="root"><a href="#root" class="headerlink" title="$root"></a>$root</h3><p>当前组件树的根组件实例。如果当前实例没有父组件，那么这个值就是它自己。<br>和parent一样，可以通过root访问或操作他的任何东西，但是不建议这么做，这样破坏程序的健壮性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const Parent =&#123;</span><br><span class="line">    template:`</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        我是父组件 ，我有&#123;&#123;Parentmoney&#125;&#125;元  &lt;br&gt;</span><br><span class="line">        &lt;button @click=giveMoeny&gt;主动给钱通过ref,$refs&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;Child :name=&quot;Childname&quot; ref=&quot;Child1&quot;&gt;&lt;/Child&gt;</span><br><span class="line">   </span><br><span class="line">    `,</span><br><span class="line">    created() &#123;</span><br><span class="line">    //通过$root 就可以访问根实例的属性和方法</span><br><span class="line">        console.log(this.$root.test);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    //根实例</span><br><span class="line">   Vue.createApp(&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">         return &#123; </span><br><span class="line">            test:123</span><br><span class="line">             &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Parent</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>如果我们有一个数据，需要各级的组件都能访问到，我们可以通过 props 属性自上而下（由父及子）进行传递的，但此种用法对于某些类型的属性而言是极其繁琐的。依赖注入提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。相当于提供了一个全局变量的样子，在所有的子组件都可以访问到。实际例子相当于的家谱图，老祖宗留了一本家谱图，想知道姓什么的时候去翻一下就知道了。</p><p>要为组件后代提供数据，需要使用到 provide 选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">provide</span>:&#123; <span class="comment">//为后代提供数据  </span></span><br><span class="line">             <span class="attr">name</span>:<span class="string">&quot;哈哈哈&quot;</span>,</span><br><span class="line">             <span class="attr">money</span>:<span class="number">10000</span>,</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>子组件使用 inject 选项来注入上层组件提供的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后代注入数据 数组接收</span></span><br><span class="line">          <span class="attr">inject</span>:[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;money&quot;</span>],</span><br></pre></td></tr></table></figure><h2 id="Vue2的中央消息总线"><a href="#Vue2的中央消息总线" class="headerlink" title="Vue2的中央消息总线"></a>Vue2的中央消息总线</h2><p>Vue2中Vue自身就是一个消息总线，使用new Vue()生成一个消息总线实例，实例有两个方法on和eimit，使用on进行监听，使用eimit来发送消息。</p><p>$on 这个函数有两个参数，第一个参数式消息名称（相当于电话号码），第二个参数式监听到消息后执行的回调函数，参数是发送的数据，发送了多少个就用多少个接收。</p><p>$emit 这个函数至少有一个参数，第一个参数式消息名称（相当于电话号码），后面的是参数，参数可以有0个或多个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(); <span class="comment">// 生成一个消息总线并设置为全域变量，用this.$bus可以访问到</span></span><br><span class="line"><span class="comment">// 其实因为我们已经创建了一个Vue实例，可以直接使用</span></span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span>; <span class="comment">// 用已经创建的Vue实例</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在父组件的created函数里面监听</span></span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;requestMoneyByBus&#x27;</span>, <span class="function"><span class="params">count</span>=&gt;</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件发送消息</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;requestMoneyByBus&#x27;</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="Vue3中央消息总线-模拟"><a href="#Vue3中央消息总线-模拟" class="headerlink" title="Vue3中央消息总线 模拟"></a>Vue3中央消息总线 模拟</h2><p>Vue3本身删除了这个概念，这里是通过mitt 这个第三方库来实现</p><p>通过全局$bus  中的 emit发布事件 和on 监听事件来实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Parent</span>&gt;</span><span class="tag">&lt;/<span class="name">Parent</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> $bus = <span class="title function_">mitt</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>($bus);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//定义一个子组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">Child</span> =&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;p&gt;我是子组件&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;button @click=change&gt;我要改变父亲的数据 通过bus 中央消息总线&lt;/button&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    `</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">change</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//发布消息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $bus.<span class="title function_">emit</span>(<span class="string">&quot;changenum&quot;</span>,<span class="number">400</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">//定义一个父组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> <span class="title class_">Parent</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;p&gt;我是父组件&lt;/p&gt; </span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;div&gt;我有一个数据 &#123;&#123;num&#125;&#125;&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      &lt;Child&gt;&lt;/Child&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    `</span> ,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        num :<span class="number">1000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Child</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//这里监听  参数一事件名  参数二回调</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      $bus.<span class="title function_">on</span>(<span class="string">&quot;changenum&quot;</span>,<span class="function">(<span class="params">v</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">num</span> -=v</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="keyword">return</span> &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title class_">Parent</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">this</span>.<span class="property">$bus</span> = <span class="title function_">mitt</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>父组件能传自定义属性给子组件，但是不能传组件给子组件，要传组件给子组件，只能使用插槽(slot)</p><p>插槽就是子组件预留给父组件放入其他组件的一个位置。</p><h2 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h2><p>没有定义名字的插槽 在子组件中通过标签 slot  来定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> =&#123;</span><br><span class="line">     <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">       &lt;div&gt;我是子组件&lt;/div&gt;</span></span><br><span class="line"><span class="string">       &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">       &lt;div&gt;=======上===========&lt;/div&gt;</span></span><br><span class="line"><span class="string">       &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">       &lt;div&gt;=======下===========&lt;/div&gt;</span></span><br><span class="line"><span class="string">       &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">     `</span></span><br></pre></td></tr></table></figure><p>父组件在调用子组件，在标签内写的内容自动会匹配到插槽里面去</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Child</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>匿名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     所有没有名字的插槽 都会被 组件标签里面的内容替换掉</span><br><span class="line">   <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="渲染作用域"><a href="#渲染作用域" class="headerlink" title="渲染作用域"></a>渲染作用域</h2><p>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。插槽内容无法访问子组件的数据。</p><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>如果有多个插槽，父组件不知道哪个插槽应该放什么内容的时候，我们就需要给每个插槽取唯一的名字，让父组件知道哪个插槽应该放什么内容。<br>给插槽一个name属性，用来给各个插槽分配唯一的名字。<br>一个组件可以最多可以有一个匿名插槽（默认插槽），其他的都必须命名。</p><p>这类带 name 的插槽被称为具名插槽 (named slots)。没有提供 name 的 slot 插口会隐式地命名为 default。</p><p>要为具名插槽传入内容，我们需要使用一个含 v-slot 指令的 &#96; 元素，并将目标插槽的名字传给该指令。<br>父组件调用    </p><p><strong>v-slot可以简写为 #</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>具名插槽 需要在父组件在标签内写一个模板 通过v-slot:name来绑定到对应的具名的插槽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:one</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          我是name1 插槽</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:two</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          我是name2 插槽</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          我是匿名插槽  可以通过绑定名字为default找到    v-slot可以缩写成#</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">     const Child =&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      template:`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件 具名插槽就是在slot标签上加上一个name属性<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>=======上===========<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>=======下===========<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        Vue.createApp(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">          data()&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">               return &#123; </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                   &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">          &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">          components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            Child</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">          &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">       &#125;).mount(&#x27;#app&#x27;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>作用域插槽是带数据的插槽，子组件提供给父组件的参数，父组件根据子组件传过来的插槽数据来进行不同的展现和填充内容。在标签template中通过v-slot指令来接受数据。</p><p>v-slot:name&#x3D;’接收变量’</p><p>该变量是一个对象  ，你可以通过结构赋值 直接写 v-slot:name&#x3D;’{key}’ ，结构括号里面的就必须写slot标签里面属性key 然后可以直接拿到值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>作用域插槽 通过子组件的插槽传值给父组件 来修改对应的样式 等  直接写需要的属性值会通过对象的形式传递给父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件在通过  v-slot:插槽名字=&#x27;自定义一个名子接收 传过来的值&#x27;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>匿名插槽 要传值 因为匿名就是default这个名字  那么就 #default=&#x27;&#x27;  来接收<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>由于传过去的是对象  如果用 v-slot:name=&#123;&#125;  这里的&#123;&#125; 就成了结构赋值 那么里面的变量就得写对应得key  然后就可以拿到对应得值<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:one</span>=<span class="string">&quot;attr&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;attr&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         &#123;&#123;attr&#125;&#125;</span></span><br><span class="line"><span class="language-xml">         我是插槽一  插槽名字叫做one</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">template</span> #<span class="attr">two</span>=<span class="string">&quot;attr2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;attr2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         &#123;&#123;attr2&#125;&#125;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">attr3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;attr3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         &#123;&#123;attr3&#125;&#125;</span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">const Child =&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">     template:`</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件 具名插槽就是在slot标签上加上一个name属性<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">       <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;one&quot;</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>=======上===========<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">       <span class="tag">&lt;<span class="name">slot</span> <span class="attr">color</span>=<span class="string">&#x27;yellow&#x27;</span>&gt;</span>456<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>=======下===========<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">       <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;two&quot;</span> <span class="attr">color</span>=<span class="string">&#x27;blue&#x27;</span> <span class="attr">font-size</span>=<span class="string">&#x27;25&#x27;</span>&gt;</span>123<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">     `</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">   &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">       Vue.createApp(&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">         data()&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">              return &#123; </span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">                  &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">         &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">         components:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">           Child</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">         &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml">      &#125;).mount(&#x27;#app&#x27;)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"> </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="与vue2插槽的区别"><a href="#与vue2插槽的区别" class="headerlink" title="与vue2插槽的区别"></a>与vue2插槽的区别</h2><p>在vue2中具名插槽，在父组件中不需要添加template模板，通过slot属性&#x3D;’name‘直接匹配到对应的具名插槽</p><p>在作用域插槽 vue2通过 slot-scope &#x3D; ’‘   来拿到插槽传的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&#x27;app&#x27;&gt;</span><br><span class="line">     &lt;h1&gt;vue2得插槽区别在具名插槽 是用 slot=&#x27;&#x27;属性绑定名称   不需要template模板  作用域插槽 数据就是用 slot-scope=&#x27;&#x27; 来接收&lt;/h1&gt;</span><br><span class="line">     &lt;Child&gt;</span><br><span class="line">       &lt;div slot=&quot;one&quot; slot-scope=&quot;xxx&quot;&gt;</span><br><span class="line">           &#123;&#123;xxx&#125;&#125;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;/Child&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">     const Child =&#123;</span><br><span class="line">       template:`</span><br><span class="line">         &lt;div&gt;</span><br><span class="line">           &lt;div&gt;我是子组件&lt;/div&gt;</span><br><span class="line">         &lt;slot name=&#x27;one&#x27; color=red&gt;&lt;/slot&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">       `,</span><br><span class="line">       data()&#123;</span><br><span class="line">         return &#123;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">       let app = new Vue(&#123;</span><br><span class="line">           el:&#x27;#app&#x27;,</span><br><span class="line">           data:&#123;</span><br><span class="line">           &#125;,</span><br><span class="line">           components:&#123;</span><br><span class="line">             Child</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：在 vue2 的最开始几个版本的vue.js文件对slot-scope 的变量会报错  ，需要引用 后几个版本的vue.js文件</strong></p><h1 id="自定义组件的双向绑定"><a href="#自定义组件的双向绑定" class="headerlink" title="自定义组件的双向绑定"></a>自定义组件的双向绑定</h1><h3 id="自定义组件多个v-model的绑定"><a href="#自定义组件多个v-model的绑定" class="headerlink" title="自定义组件多个v-model的绑定"></a>自定义组件多个v-model的绑定</h3><p>本质是一个父子组件通信的语法糖，通过prop和$.emit实现</p><p>通过前面的分析，可以知道有如下转换：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">NameInput</span> v-<span class="attr">model</span>:firstName=<span class="string">&quot;firstName&quot;</span> v-<span class="attr">model</span>:lastName=<span class="string">&quot;lastName&quot;</span> /&gt;</span><br><span class="line">其实是下面的是下面的样子</span><br><span class="line">&lt;<span class="title class_">NameInput</span> :firstName=<span class="string">&quot;number&quot;</span> @<span class="attr">update</span>:firstName=<span class="string">&quot;v=&gt;number=v&quot;</span> :lastName=<span class="string">&quot;number&quot;</span> @<span class="attr">update</span>:lastName=<span class="string">&quot;v=&gt;number=v&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>由此可知：有一个modelValue的属性，有一个update:modelValue的事件，我们只需要在子组件中将modelValue设置为默认值，数据变化的时候将新的值用update:modelValue事件emit出去就实现了双向绑定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NameInput</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;text&quot; placeholder=&quot;请填写姓&quot; :value=&quot;firstName&quot; @input=&quot;$emit(&#x27;update:firstName&#x27;, $event.target.value)&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;text&quot; placeholder=&quot;请填写名&quot; :value=&quot;lastName&quot; @input=&quot;$emit(&#x27;update:lastName&#x27;, $event.target.value)&quot;&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>], <span class="comment">// 声明属性</span></span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:firstName&#x27;</span>, <span class="string">&#x27;update:lastName&#x27;</span>], <span class="comment">// 声明事件</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3第三天</title>
      <link href="/2023/06/05/Vue3_day3/"/>
      <url>/2023/06/05/Vue3_day3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue组件系统"><a href="#Vue组件系统" class="headerlink" title="Vue组件系统"></a>Vue组件系统</h1><h2 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h2><ol><li><p>在vue中，组件是可复用的Vue实例，它拥有独一无二的组件名称，它可以扩展HTML元素，以组件名称的方式作为自定义的HTML标签。组件可大大提高了代码的复用率。</p></li><li><p>把一些公共的模块抽取出来，然后写成单独的的工具组件或者页面，在需要的页面中就直接引入即可。那么我们可以将其抽出为一个组件进行复用。</p><p>例如 页面头部、侧边、内容区，尾部，上传图片，等多个页面要用到一样的就可以做成组件，提高了代码的复用率。</p></li></ol><h2 id="组件的创建"><a href="#组件的创建" class="headerlink" title="组件的创建"></a>组件的创建</h2><h3 id="全局注册组件"><a href="#全局注册组件" class="headerlink" title="全局注册组件"></a>全局注册组件</h3><p>在Vue3中定义全局组件，需要在createpp创建完实例之后，在挂载根元素#app之前，通过app.component（） 的方法来全局注册组件， 该方法的 <strong>第一个参数是 组件的名称 需要用引号引用起来</strong>。<strong>第二个参数是一个对象，里面的配置项基本和Vue一样。</strong></p><h3 id="局部注册组件"><a href="#局部注册组件" class="headerlink" title="局部注册组件"></a>局部注册组件</h3><p>在Vue3中createApp 创建的实例当中，有一个配置项 components对象，里面写需要注册的组件，key就是组件名，值也是一个对象，里面就是组件的配置项 基本和Vue实例的配置项一样</p><p><strong>注意: 组件必须要有template模板，不然会报错。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义一个模板 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是子组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> app =  <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">                 &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">components</span>:&#123;  <span class="comment">//局部注册组件</span></span><br><span class="line">            <span class="title class_">Child</span>:&#123;</span><br><span class="line">                <span class="comment">// template: &quot;#child&quot;    //指定对应的html id那个作为模板  (方式一)</span></span><br><span class="line">                <span class="attr">template</span>:<span class="string">&quot;&lt;h1&gt;我是子组件&lt;/h1&gt;&quot;</span>   <span class="comment">//方式二 直接写html结构 直接解析</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  全局注册组件</span></span><br><span class="line">    <span class="comment">//  app.component(&quot;Child&quot;,&#123;</span></span><br><span class="line">    <span class="comment">//     template:&quot;&lt;h1&gt;我是子组件&lt;/h1&gt;&quot;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="组件的模板template"><a href="#组件的模板template" class="headerlink" title="组件的模板template"></a>组件的模板template</h3><ol><li><p>方式一：可以在html中写对应的template双标签，并添加一个id，就是组件的名称，双标签里面写内容。然后在注册组件的时候，template选项就直接写对应的html的id，这就可以导入该模板了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个模板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">          我是子组件</span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// template: &quot;#child&quot;    //指定对应的html id那个作为模板  (方式一)</span></span><br></pre></td></tr></table></figure></li><li><p>方式二：直接在定义组件的时候，template选项可以直接写html代码。 （推荐使用） </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components</span>:&#123;  <span class="comment">//局部注册组件</span></span><br><span class="line">              <span class="title class_">Child</span>:&#123;</span><br><span class="line">                  <span class="comment">// template: &quot;#child&quot;    //指定对应的html id那个作为模板  (方式一)</span></span><br><span class="line">                  <span class="attr">template</span>:<span class="string">&quot;&lt;h1&gt;我是子组件&lt;/h1&gt;&quot;</span>   <span class="comment">//方式二 直接写html结构 直接解析</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="组件的调用"><a href="#组件的调用" class="headerlink" title="组件的调用"></a>组件的调用</h3><p>通过你写的组件名字，在挂载的根元素#app中，直接把名字写成html标签，Vue会直接解析该组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="组件的配置项"><a href="#组件的配置项" class="headerlink" title="组件的配置项"></a>组件的配置项</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">      &lt;!-- 调用组件 --&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//定义组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> <span class="title class_">Child</span> = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;p&gt;我是一个子组件，这时我的名字data配置项里面的数据--&#123;&#123;name&#125;&#125;-- ，我&#123;&#123;age&#125;&#125;岁了，&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          &lt;button @click=fn&gt;点我看看有啥反应&lt;/button&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          </span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">          `</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">name</span>:<span class="string">&quot;哈哈哈，你好&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="attr">age</span>:<span class="number">20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                  <span class="title function_">alert</span>(<span class="string">&quot;嘿嘿嘿！你好呀&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="keyword">return</span> &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="attr">components</span>:&#123; <span class="comment">//注册组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="comment">// Child:Child  //ES6 中对象的key和值的名称一样可以省略只写一个</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="title class_">Child</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>和Vue实例差不多，上例可以看出</p><h3 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h3><p>在vue中定义的组件，就像是搭积木一样，每一块都可以重复使用，这样才能使代码有更好的复用率。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 9&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义组件</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Student</span> = &#123;</span><br><span class="line">        <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;h1&gt;哈哈哈你好呀&lt;/h1&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;id:&#123;&#123;post&#125;&#125;------我喜欢&#123;&#123;like&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                <span class="attr">like</span>:<span class="string">&quot;吃美食&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> app= <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">        <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> &#123; </span><br><span class="line">             </span><br><span class="line">                 &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     app.<span class="title function_">component</span>(<span class="string">&quot;Student&quot;</span>,<span class="title class_">Student</span>)</span><br><span class="line"></span><br><span class="line">     app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="组件之间的通信方式"><a href="#组件之间的通信方式" class="headerlink" title="组件之间的通信方式"></a>组件之间的通信方式</h2><p><img src="C:\Users\hexing\AppData\Roaming\Typora\typora-user-images\image-20230531111503566.png" alt="image-20230531111503566"></p><h3 id="父组件传值给子组件"><a href="#父组件传值给子组件" class="headerlink" title="父组件传值给子组件"></a>父组件传值给子组件</h3><p>父亲通过自定义属性给子组件一些属性值，子组件就可以通过props这个配置对象获取到</p><h3 id="理解传值"><a href="#理解传值" class="headerlink" title="理解传值"></a>理解传值</h3><p>子组件的值是由父组件给的， 比如我们的名字是由父母给的，但自己身也会包含有一些固定的属性，就会放在data里面的数据中， 父组件要给子组件传值，那么通过的是自定义属性，就是在对应的组件标签中写上对应的自定义属性名字 子组件的attrs 属性上就有了对应的父组件传的自定义属性值， 光父组件传值，子组件想要用对应的自定义属性值，就需要用 props这个配置对象接收一下，一般最开始就用数组来接收不同的自定义属性值 这里需要用引号引起来自定义属性。 子组件就可以拿到对应的属性值了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">       &lt;!-- 绑定静态属性值 --&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">Dog</span> <span class="attr">name</span>=<span class="string">&quot;笑笑&quot;</span> <span class="attr">id</span>=<span class="string">&quot;一&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Dog</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">Dog</span> <span class="attr">name</span>=<span class="string">&quot;小黑&quot;</span> <span class="attr">id</span>=<span class="string">&quot;二&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Dog</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">Dog</span> <span class="attr">name</span>=<span class="string">&quot;二狗&quot;</span> <span class="attr">id</span>=<span class="string">&quot;三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Dog</span>&gt;</span></span></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">// 定义组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">const</span> <span class="title class_">Dog</span>  =&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">           &lt;h1&gt;我是主人的第&#123;&#123;id&#125;&#125;只宠物，我是一只&#123;&#123;dogType&#125;&#125;,主人给我起的名字叫&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">           `</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   dogType :<span class="string">&quot;哈士奇&quot;</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">// porps 来接收父组件传的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">props</span>:[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;id&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="comment">//注册组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="title class_">Dog</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="props的对象配置项"><a href="#props的对象配置项" class="headerlink" title="props的对象配置项"></a>props的对象配置项</h3><ul><li>type：指明name这个自定义属性的数据类型  （String，Number,Array等等）数据类型就是js内置的 首字母大写</li><li>validator（）{}  回调函数 参数就是传过来的值</li><li>default  默认值  不传值就显示它</li><li>required    是否必须    期待一个布尔值</li></ul><p>直接对象 然后写<strong>null</strong>  就是不进行任何配置 就和数组接收没啥区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span>:&#123;</span><br><span class="line">                  <span class="attr">type</span>: <span class="title class_">String</span> , <span class="comment">//期望数据类型  可以是Array  object 等   这里的数据类型 要首字母大小 js内置的一些对象 ,如果不是vue会给出警告</span></span><br><span class="line">                  <span class="title function_">validator</span>(<span class="params">value</span>)&#123;  <span class="comment">//是一个函数  验证 会触发该函数</span></span><br><span class="line">                      <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">                      <span class="keyword">if</span>(value.<span class="property">length</span>&gt;<span class="number">2</span>) &#123;</span><br><span class="line">                          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  <span class="attr">default</span>:<span class="string">&quot;何兴&quot;</span>,  <span class="comment">//配置默认值  没有传就直接用这个默认值</span></span><br><span class="line">                  required : <span class="literal">true</span>   <span class="comment">//必须要</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h3 id="class，style属性透传"><a href="#class，style属性透传" class="headerlink" title="class，style属性透传"></a>class，style属性透传</h3><p>在父组件给子组件传style或者class会直接传递到子组件的根元素上，不会覆盖原来的，会进行合并。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">        &lt;!-- 父组件给子组件设置样式 就会叠加在子组件的根元素上 --&gt; </span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: 700; color: red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">        &lt;!-- 类属性也是一样的道理 --&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//定义组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> <span class="title class_">Child</span>  =&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">template</span>:<span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">            &lt;p style=&#x27;font-size: 24px;&#x27; class=&#x27;child1&#x27;&gt;我是子组件我自带的有一写样式&lt;/p&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">            `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="keyword">return</span> &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            ,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">components</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title class_">Child</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="父组件监听子组件事件（子传父）"><a href="#父组件监听子组件事件（子传父）" class="headerlink" title="父组件监听子组件事件（子传父）"></a>父组件监听子组件事件（子传父）</h3><p>父组件采用事件绑定的方式监听子组件的事件</p><p><strong>相当于父组件注册了一个私人的电话号码告诉子组件，你只要打这个电话我就会把钱打给你了。</strong></p><ol><li><p>子组件通过触发一个方法向主组件发送事件，来进行通信</p><p>通过$emit() 发布方法  参数一时自定义事件名称   后面写传递的其他参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">change</span>(<span class="params"></span>)&#123;  <span class="comment">//子组件要想通信父组件 就必须通过 this.$emit 方法 里面的参数 第一个写 父组件定义在子组件身上的自定义属性  后面其他参数就是传的参数</span></span><br><span class="line">                  <span class="variable language_">this</span>.$emit(<span class="string">&quot;askChangeParent&quot;</span>,<span class="string">&quot;我是其他参数&quot;</span>)</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure></li><li><p>父组件要与子组件进行通信，需要在引用子组件的标签上通过v-on绑定自定义子组件发送过来的自定义事件名称 然后通过该事件触发一个方法来对父组件传的值进行修改，和接收子组件传过来的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Parent</span> = &#123; <span class="comment">//子组件必须在父组件的tempalte模板中调用子组件  和注册子组件</span></span><br><span class="line">   </span><br><span class="line">          <span class="comment">// 父组件要通过个子组件绑定自定义自定义事件 来接收$emit 调用的自定义事件名字</span></span><br><span class="line">          <span class="attr">template</span>: <span class="string">`  </span></span><br><span class="line"><span class="string">              &lt;h1&gt;我是父组件&lt;/h1&gt;</span></span><br><span class="line"><span class="string">              &lt;Child :name=&#x27;Childname&#x27;  @askChangeParent=&#x27;askName&#x27;&gt;&lt;/Child&gt;</span></span><br><span class="line"><span class="string">          `</span>,</span><br><span class="line">          <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">              <span class="keyword">return</span> &#123;</span><br><span class="line">                  <span class="title class_">Childname</span>:<span class="string">&quot;何兴&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">components</span>: &#123; <span class="comment">//子组件注册到父组件当中</span></span><br><span class="line">              <span class="title class_">Child</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">methods</span>:&#123;</span><br><span class="line">              <span class="title function_">askName</span>(<span class="params">v</span>)&#123;</span><br><span class="line">                  <span class="variable language_">console</span>.<span class="title function_">log</span>(v); </span><br><span class="line">                  <span class="variable language_">this</span>.<span class="property">Childname</span> = <span class="string">&quot;我其实叫哈哈哈&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>这样在触发父子组件通信时，就会触发askName这个方法 然后进行操作数据，通过v来接收子组件传过来的值</p></li></ol><p><strong>注意：在子组件向父组件传值的时候，vue3一些版本的js文件会报一个警告</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Extraneous non-emits event listeners (askChangeParent) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the &quot;emits&quot; option. </span><br></pre></td></tr></table></figure><p>这个说的是你需要在子组件接收一下父组件绑定的自定义事件，通过emits这个配置项来接收，数组写法和props一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">emits</span>: [<span class="string">&quot;askChangeParent&quot;</span>],</span><br></pre></td></tr></table></figure><p>emits的对象写法，因为这个自定义事件是一个函数，用于来验证子组件传给父组件的值进行校验。这样可以对子传父的值是v，可以对其进行验证，期待返回一个true  ，如果false会在控制台有警告但是不会影响传值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// emits: [&quot;askChangeParent&quot;],</span></span><br><span class="line">      <span class="attr">emits</span>:&#123;</span><br><span class="line">          <span class="title function_">askChangeParent</span>(<span class="params">v</span>)&#123; <span class="comment">//期待一个返回值</span></span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">              <span class="keyword">if</span>(v.<span class="property">length</span>&gt;<span class="number">3</span>)&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3第一天</title>
      <link href="/2023/05/30/Vue3_day1/"/>
      <url>/2023/05/30/Vue3_day1/</url>
      
        <content type="html"><![CDATA[<h1 id="vue3的创建"><a href="#vue3的创建" class="headerlink" title="vue3的创建"></a>vue3的创建</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;a&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// vue3全局对象Vue 有一个createApp 这个方法  里面配置项 就是原来vue2那些  但是data必须是函数 然后返回对应的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//createApp下有一个mount的挂载的方法  </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">a</span>: <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p>指令 (Directives) 是带有  前缀的特殊特性。指令特性的预期值是：单个 JavaScript 表达式。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。 例如我们在入门案例中的v-on，代表绑定事件。</p><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p>通过v-text写在标签属性上，渲染data里面的数据 ，该指令只能渲染文本不能渲染DOM标签结构，都会当成文本渲染。</p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>通过v-html写在标签属性上，可以渲染DOM标签，这个会执行js代码，会被xss攻击</p><ul><li>v-html 指令的作用：设置元素的innerHTML</li><li>内容中有html结构会被解析为标签</li><li>v-text指令无论内容是什么，只会解析为文本</li><li>解析文本使用v-text,需要解析html结构使用v-html</li></ul><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p>绑定该指令的标签不解析Vue的语法</p><p>1、跳过其所在节点的编译过程</p><p>2、可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;txt&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">     &lt;hr&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">     &lt;hr&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;pre&#125;&#125;，不解析该标签的vue语法<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">         <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> &#123;</span><br><span class="line">                 <span class="attr">txt</span>:<span class="string">&quot;我是v-text指令渲染的，会替代里标签里的内容&quot;</span>,</span><br><span class="line">                 <span class="attr">html</span>:<span class="string">&quot;&lt;h1&gt;我是v-html指令&lt;/h1&gt;&quot;</span>,</span><br><span class="line">                 <span class="attr">pre</span>:<span class="string">&quot;我是v-pre&quot;</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="v-if-x2F-v-else-if-x2F-v-else"><a href="#v-if-x2F-v-else-if-x2F-v-else" class="headerlink" title="v-if &#x2F;v-else-if &#x2F;v-else"></a>v-if &#x2F;v-else-if &#x2F;v-else</h2><p>在v-if中进行判断 为真则渲染改dom节点  如果为假 当写v-else-if 就继续进行判断 为真则渲染v-else-if 的dom节点 都不满足则渲染 v-else的dom节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">     &#123;&#123;grade&#125;&#125;</span><br><span class="line">     &lt;p v-<span class="keyword">if</span>=<span class="string">&quot;grade&gt;=90&quot;</span>&gt;优秀&lt;/p&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else-if</span>=<span class="string">&quot;grade&gt;=60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change&quot;</span>&gt;</span>更换成绩<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="attr">grade</span>:<span class="number">90</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             <span class="title function_">change</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                 <span class="variable language_">this</span>.<span class="property">grade</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(<span class="number">100</span>-<span class="number">50</span>)+<span class="number">50</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>本质时为true 时设置 css 为 display ：none  为false 时 css 删除display：none</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>v-show会影藏元素如果条件为false  就会display: none;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;istrue=true&quot;</span>&gt;</span>显示影藏元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">         <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;istrue&quot;</span>&gt;</span>我是v-show<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">     <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">         <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="keyword">return</span> &#123;</span><br><span class="line">                 <span class="attr">a</span>:<span class="number">123</span>,</span><br><span class="line">                 <span class="attr">istrue</span>:<span class="literal">false</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="v-show与v-if的区别"><a href="#v-show与v-if的区别" class="headerlink" title="v-show与v-if的区别"></a>v-show与v-if的区别</h2><p>控制手段：v-show隐藏则是为该元素添加css–display:none，dom元素依旧还在。v-if显示隐藏是将dom元素整个添加或删除</p><p>编译过程：v-if切换有一个局部编译&#x2F;卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；v-show只是简单的基于css切换</p><p>编译条件：v-if是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。只有渲染条件为假时，并不做操作，直到为真才渲染</p><p>v-show 由false变为true的时候不会触发组件的生命周期</p><p>v-if由false变为true的时候，触发组件的beforeCreate、create、beforeMount、mounted钩子，由true变为false的时候触发组件的beforeDestory、destoryed方法</p><p>性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</p><h2 id="v-on绑定事件"><a href="#v-on绑定事件" class="headerlink" title="v-on绑定事件"></a>v-on绑定事件</h2><p>vue的事件绑定</p><p>v-on:event(缩写：@event)给元素绑定事件监听器。</p><p>一些常用的事件  click （单击事件）  dbclick（双击事件） input（输入框改时触发）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                       <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                           <span class="title function_">alert</span>(<span class="string">&quot;hello world&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                       &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-on的修饰符"><a href="#v-on的修饰符" class="headerlink" title="v-on的修饰符"></a>v-on的修饰符</h3><p> .stop 阻止事件继续传播，封装了event.stopPropagation()</p><p>.prevent 阻止标签默认行为，封装了event.preventDefault()</p><p>.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</p><p>.self 只当在 event.target 是当前元素自身时触发处理函数</p><p>.once 事件将只会触发一次</p><p>.passive 告诉浏览器你不想阻止事件的默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="comment">&lt;!-- 使用阻止冒泡的修饰符 这样就不会触发外部的outer --&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">       &lt;!-- 使用阻止默认行为修饰符 这样不会去访问百度 --&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;fn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">       &lt;!-- 自身执行 --&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.self</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>self<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">       &lt;!-- 只能触发一次 --&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>once<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">           <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">methods</span>:&#123;</span><br><span class="line">               <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   <span class="title function_">alert</span>(<span class="string">&quot;outer&quot;</span>)</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="title function_">inner</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   <span class="title function_">alert</span>(<span class="string">&quot;inner&quot;</span>)</span><br><span class="line">               &#125;,</span><br><span class="line">               <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>keydown 在用户按下按键时触发。</p><p>keypress 在用户敲击按钮时触发。</p><p>keyup 当用户释放按键时触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">      &lt;!-- 键盘事件加上修饰符 --&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; @keyup.a=&quot;fn&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 键盘事件加上修饰符 --&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; @keyup.enter=&quot;fn&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">        Vue.createApp(&#123;</span><br><span class="line">          data()&#123;</span><br><span class="line">               return &#123; </span><br><span class="line">                   &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          methods:&#123;</span><br><span class="line">              fn()&#123;</span><br><span class="line">                  alert(&quot;a&quot;)</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>相应键盘具体的按键别名如下，我们推荐通过键盘按键别名进行事件设置：</p><p>.enter</p><p>.tab</p><p>.delete (捕获“删除”和“退格”键)</p><p>.esc</p><p>.space</p><p>.up</p><p>.down</p><p>.left</p><p>.right</p><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用缩写的动态事件 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @[<span class="attr">event</span>]=<span class="string">&quot;fn&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- 对象语法 形如：js的 &#123; other, ...&#123; id, src &#125; &#125; 和属性绑定中的绑定对象形式一样 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on</span>=<span class="string">&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;</span>&gt;</span>对象语法<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 绑定对象形式的 attribute 形如：js的 &#123; other, ...&#123; id, src &#125; &#125; --&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- &lt;img v-bind=&quot;&#123; id: &#x27;id&#x27;, src: head &#125;&quot;&gt;&lt;/img&gt; --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。</p><p>通俗来讲：就是我们输入一个数字，显示的值就变了，反过来在其他地方改变这个值，输入框的内容也会跟着变。</p><p>在表单输入元素或组件上创建双向绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">components</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; v-model=&quot;str&quot;&gt;</span><br><span class="line">       &#123;&#123;str&#125;&#125;</span><br><span class="line"></span><br><span class="line">       &lt;!-- v-model一般默认绑定value  是v-on 和 v-bind 的语法糖--&gt;</span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; @input=&quot;fn&quot; v-bind:value=&quot;text&quot;&gt;&#123;&#123;text&#125;&#125;</span><br><span class="line"></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">         Vue.createApp(&#123;</span><br><span class="line">           data()&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                   str:123 ,</span><br><span class="line">                   text:12</span><br><span class="line">                    &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">          methods:&#123;</span><br><span class="line">           fn(e)&#123;</span><br><span class="line">               this.text = e.target.value</span><br><span class="line">           &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h3 id="v-model的修饰符"><a href="#v-model的修饰符" class="headerlink" title="v-model的修饰符"></a>v-model的修饰符</h3><p>.lazy - 监听 change 事件而不是 input</p><p>.number - 将输入的合法字符串转为数字</p><p>.trim - 移除输入内容两端空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">       &lt;!-- .<span class="property">lazy</span>  当值修改完 失去焦点改变 --&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; v-model.lazy=&quot;str&quot;&gt;</span><br><span class="line">       &#123;&#123;str&#125;&#125;</span><br><span class="line"></span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;!-- 把值转为数字 --&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; v-model.number=&quot;str&quot;&gt;</span><br><span class="line">       &#123;&#123;str&#125;&#125; ----&#123;&#123;typeof str&#125;&#125;</span><br><span class="line"></span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;!-- 去除两端空格 --&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; v-model.trim=&quot;str&quot;&gt;</span><br><span class="line">       &#123;&#123;str&#125;&#125; </span><br><span class="line"></span><br><span class="line">       &lt;!-- v-model一般默认绑定value  是v-on 和 v-bind 的语法糖--&gt;</span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; @input=&quot;fn&quot; v-bind:value=&quot;text&quot;&gt;&#123;&#123;text&#125;&#125;</span><br><span class="line"></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">         Vue.createApp(&#123;</span><br><span class="line">           data()&#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                   str:&quot;123&quot; ,</span><br><span class="line">                   text:&quot;12&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">          methods:&#123;</span><br><span class="line">           fn(e)&#123;</span><br><span class="line">               this.text = e.target.value</span><br><span class="line">           &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><p>v-once 也是一个不需要表达式的指令，作用是定义它的元素或组件只渲染一次，包括元素或 组件的所有子节点。首次渲染后，不再随数据的变化重新渲染，将被视为静态内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; v-model=&quot;num&quot;&gt;</span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;span&gt;&#123;&#123;num&#125;&#125;  不加v-once 的效果&lt;/span&gt;</span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;span v-once&gt;&#123;&#123;num&#125;&#125; v-once只渲染一次 ,数据改变也不会在渲染&lt;/span&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">         Vue.createApp(&#123;</span><br><span class="line">           data()&#123;</span><br><span class="line">                return &#123; </span><br><span class="line">                   num:10</span><br><span class="line">                    &#125;</span><br><span class="line">           &#125;,</span><br><span class="line"></span><br><span class="line">        &#125;).mount(&#x27;#app&#x27;)</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><p>v-cloak指令常常用在插值表达式的标签中，因为它可以解决当网络加载很慢时，或者频繁渲染时候，页面就会显示出源代码的情况。</p><h3 id="v-cloak的原理"><a href="#v-cloak的原理" class="headerlink" title="v-cloak的原理"></a>v-cloak的原理</h3><p>v-cloak原理是先通过样式隐藏内容，然后在内存中进行值的替换，将替换的内容再反馈给界面，数据渲染完场之后，v-cloak 属性会被自动去除。</p><h1 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h1><h2 id="HTML标签的属性"><a href="#HTML标签的属性" class="headerlink" title="HTML标签的属性"></a>HTML标签的属性</h2><p>每个HTML都有很多属性，常见的比如src, href, class, style等。</p><p>比如HTML标签img就会有一个src属性，设置图片的地址，就会显示相应的图片。</p><p>我们在原生开发中是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;head&quot;</span> <span class="attr">src</span>=<span class="string">&quot;default.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>默认我们的头像是显示一张默认图片，当我们获取我们的个人信息后，我们需要修改我们头像的图片，需要重新设置src。</p><p>原生我们是这样做的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;head&#x27;</span>).<span class="property">src</span> = <span class="string">&#x27;http://www.image.com/</span></span><br></pre></td></tr></table></figure><h2 id="v-bind绑定属性"><a href="#v-bind绑定属性" class="headerlink" title="v-bind绑定属性"></a>v-bind绑定属性</h2><p>在标签上通过该指令绑定对应得属性，就可以在引号里面写对应data里面得变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>我是v-bind绑定的title属性<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgurl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">           <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> &#123;</span><br><span class="line">                   <span class="attr">title</span>:<span class="string">&quot;我是title&quot;</span>,</span><br><span class="line">                   <span class="attr">imgurl</span>:<span class="string">&quot;https://pic3.zhimg.com/v2-5523ed93593ee4c7fd97b972d0af92d3_r.jpg&quot;</span>,</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以多个绑定属性  通过绑定一个对象得形式 来绑定多个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span>我是v-bind绑定的title属性<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imgurl&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">:</span>=<span class="string">&quot;&#123;id:id,title:title&#125;&quot;</span>&gt;</span>绑定对象<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">           <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> &#123;</span><br><span class="line">                   <span class="attr">title</span>:<span class="string">&quot;我是title&quot;</span>,</span><br><span class="line">                   <span class="attr">imgurl</span>:<span class="string">&quot;https://pic3.zhimg.com/v2-5523ed93593ee4c7fd97b972d0af92d3_r.jpg&quot;</span>,</span><br><span class="line">                   <span class="attr">id</span>:<span class="number">2</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><p>绑定变量  类似  对象中【key】&#x3D;value的形式  这里的key 在data里面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :[key]=<span class="string">&quot;title&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="attr">title</span>:<span class="string">&quot;我是title&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="attr">imgurl</span>:<span class="string">&quot;https://pic3.zhimg.com/v2-5523ed93593ee4c7fd97b972d0af92d3_r.jpg&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="attr">id</span>:<span class="number">2</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                   <span class="attr">key</span>:<span class="string">&quot;title&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建</title>
      <link href="/2023/05/22/hexo%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/05/22/hexo%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>摘要 </p><span id="more"></span><p>Hexo简介</p><p>Hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入hexo官网进行详细的查看，这个可选择中文查看。</p><p>文章目录</p><p>Hexo简介</p><p>#搭建流程简绍：</p><p>#Step 1：安装Git</p><p>#Step 2：下载配置Nodejs</p><p>#Step 3：安装Hexo</p><p>#Step4：注册Github账号并创建仓库</p><p>#Step5.SSH相关配置</p><p>#Step6：将Hexo部署到Github</p><p>#Step7.发布文章</p><p>#8.Hexo常用命令</p><p>#搭建流程简绍：</p><p>1.安装git</p><p>2.安装Nodejs</p><p>3.安装Hexo</p><p>4.注册Github账号并创建仓库</p><p>5.SSH相关配置</p><p>6.将Hexo部署到Github</p><p>7.发布文章</p><p>8.Hexo 常用的命令</p><p>#Step 1：安装Git</p><p>1.下载</p><p>点击Git官网下载对应的版本，win10一般是64位。</p><p>2.安装</p><p>在安装过程中一路next</p><p>3.检查git是否安装成功</p><p>在CMD窗口（R+win输入cmd即可打开CMD窗口)输入指令：</p><p>git</p><p>1</p><p>结果会显示：</p><p>到这里git就安装好了，这时会有一个Git Bash的命令工具（鼠标右击就会出现）。</p><p>#Step 2：下载配置Nodejs</p><p>1.下载</p><p>进入nodejs下载，根据自己的电脑选择32位或64位。</p><p>2.安装</p><p>在安装过程中一路next即可。</p><p>3.检查是否成功</p><p>在CMD窗口（R+win输入cmd即可打开CMD窗口)输入指令：</p><p>| node -v</p><p>| npm -v</p><p>1</p><p>2</p><p>结果显示如下代表安装成功</p><p>#Step 3：安装Hexo</p><p>前面git和nodejs安装好后，就可以安装hexo博客框架了。</p><p>首先创建一个文件夹，命名为你想要的名字，我的名字是blog，这个文件夹在后续就是用来存放你所创建博客的所有文件。这个文件也称根目录。</p><p>1.安装Hexo</p><p>在这个blog文件夹（你所创建的文件夹）下直接鼠标右键git bash打开，这个时候会有命令窗口弹出。或者（win+r）输入cmd，然后cd到你创建的blog文件夹。</p><p>在窗口中输入：</p><p>npm install -g hexo-cli </p><p>1</p><p>然后等待安装，显示如下：</p><p>2.检验是否安装成功</p><p>在窗口中接着输入hexo -v来检验是否安装成功</p><p>hexo -v</p><p>1</p><p>结果显示：</p><p>至此已全部安装完。</p><p>3.初始化网址</p><p>在窗口中接着输入：</p><p>hexo init</p><p>1</p><p>这个过程可能会比较慢，请耐心等待</p><p>结果如下：</p><p>表明初始化已成功。</p><p>4.安装网址所需要的依赖插件</p><p>在窗口中接着输入：</p><p>npm install</p><p>1</p><p>完成后，在你的根目录（blog文件夹）下会出现以下文件：</p><p>在这里解释一下：</p><p>node_modules: 依赖包</p><p>public：存放生成的页面</p><p>scaffolds：生成文章的一些模板</p><p>source：用来存放你的文章</p><p>themes：主题</p><p>_config.yml: 博客的配置文件</p><p>db.json：source解析所得到的</p><p>package.json：项目所需模块项目的配置信息</p><p>5.生成静态网页和开启本地服务</p><p>在窗口中接着输入：</p><p>hexo g&#x2F;&#x2F;生成静态网址</p><p>hexo s&#x2F;&#x2F;开启本地服务器</p>]]></content>
      
      
      
        <tags>
            
            <tag> -other </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>照片</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>my</title>
      <link href="/my/index.html"/>
      <url>/my/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://source.fomal.cc/img/default_cover_61.webp' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">封面专区</div>  <p>本站用作文章封面的图片，不保证分辨率</p>  <a href='/box/Gallery/photo'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://source.fomal.cc/img/dm11.webp' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">背景专区</div>  <p>收藏的一些的背景与壁纸，分辨率很高</p>  <a href='/box/Gallery/wallpaper'></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
